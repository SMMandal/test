{
    "openapi": "3.0.1",
    "info": {
        "title": "Data Lake Service",
        "version": "Build# latest"
    },
    "servers": [
        {
            "url": "http://localhost:8080/dls"
        }
    ],
    "security": [
        {
            "x-api-key": [
                "read",
                "write"
            ]
        },
        {
            "x-dls-key": [
                "read",
                "write"
            ]
        }
    ],
    "tags": [
        {
            "name": "Catalog",
            "description": "Search files, browse through file catalogs"
        },
        {
            "name": "Directory",
            "description": "Create , Update and delete Directory ,their directory-meta rules and assign permission to directory"
        },
        {
            "name": "File",
            "description": "Upload & download files"
        },
        {
            "name": "Schema",
            "description": "Create,update and delete metadata"
        },
        {
            "name": "Metadata",
            "description": "Manage file, directory metadata"
        },
        {
            "name": "Link",
            "description": "Relate files to each other"
        },
        {
            "name": "Share",
            "description": "Share files with other DLS users"
        },
        {
            "name": "Lock",
            "description": "Lock or unlock a file or directory"
        },
        {
            "name": "Permission",
            "description": "Retrieve, update or delete datapoint permission (only datapoint creator is allowed)"
        },
        {
            "name": "User",
            "description": "Create DLS users and keys"
        },
        {
            "name": "Administration",
            "description": "Various administrative tasks for platform admins"
        },
        {
            "name": "Datapoint",
            "description": "Find datapoint using various search parameters and delete a datapoint"
        },
        {
            "name": "Repository",
            "description": "Create and get datapoint repository"
        },
        {
            "name": "Dataset",
            "description": "Create and get datapoint dataset"
        },
        {
            "name": "Distribution",
            "description": "Create and get datapoint distribution"
        },
        {
            "name": "Provenance",
            "description": "Retrieve or create datapoint provenance"
        },
        {
            "name": "Catalog (Datapoint)",
            "description": "Create and get datapoint catalog"
        },
        {
            "name": "Metadata (Datapoint)",
            "description": "Update and delete datapoint metadata"
        }
    ],
    "paths": {
        "/user/role": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user role",
                "operationId": "getUserRole",
                "parameters": [
                    {
                        "name": "user-name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "additionalProperties": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update user role",
                "operationId": "updateUserRole",
                "parameters": [
                    {
                        "name": "user-name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "admin",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "organization-position",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "pattern": "^(([\\w-.:][ ]?)*[a-zA-Z]([\\w-.:][ ]?)*)(\\/\\w+)+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete user role",
                "operationId": "deleteUserRole",
                "parameters": [
                    {
                        "name": "user-name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/metadata": {
            "put": {
                "tags": [
                    "Metadata"
                ],
                "summary": "Add, update or delete file and/or directory metadata",
                "description": "The <code>metadata</code> list in the request JSON can be used to completely overwrite an existing set of\nmetadata for one or more <code>files</code> or <code>directories</code>. <br>\nThis would effectively add or update metadata. <br>\nIf metadata list is sent empty, it would remove all existing metadata of the file/directory from DLS.<p>\nUnlike other API, all characters are allowed in metadata value in this API.\nFor <code>\"</code> and <code>\\\\</code> characters, an escape character <code>\\\\</code> has to be prepended.\n",
                "operationId": "insertBulkMetadata",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataPayload"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/lock": {
            "get": {
                "tags": [
                    "Lock"
                ],
                "summary": "Get lock/unlock status of the file",
                "description": "Find the lock or unlock status of the file by users",
                "operationId": "getLockStatus",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Lock"
                ],
                "summary": "Hide/show a locked file",
                "description": "Once a file is locked, hide or show it to other users",
                "operationId": "hide",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "description": "URI of the file to be locked",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hide",
                        "in": "query",
                        "description": "Whether file is to be hidden",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Lock"
                ],
                "summary": "Lock file",
                "description": "Lock a file in DLS from other users to modify",
                "operationId": "lock",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "description": "URI of the file to be locked",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hide",
                        "in": "query",
                        "description": "Whether file is to be hidden",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "plain/text": {
                            "schema": {
                                "type": "string",
                                "description": "Reason for locking this file"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Lock"
                ],
                "summary": "Unlock file",
                "description": "Unlock a file which was already locked earlier by you. Note : admin can unlock any locked file.",
                "operationId": "unlock",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/file/savepoint": {
            "put": {
                "tags": [
                    "File"
                ],
                "summary": "Update file savepoint",
                "description": "Renaming the savepoint of a file will also automatically rename savepoint of all the file's archive as well",
                "operationId": "updateSavepoint",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "description": "File URI",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "savepoint",
                        "in": "query",
                        "description": "New savepoint name. Enter blank to remove existing savepoint.",
                        "required": false,
                        "schema": {
                            "pattern": "^((/)?([\\w-.:]*[a-zA-Z][\\w-.:]*)+){1,10}$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/file/metadata": {
            "put": {
                "tags": [
                    "File"
                ],
                "summary": "Update file metadata",
                "operationId": "updateMetadata",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "description": "File URI",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/file/directory": {
            "put": {
                "tags": [
                    "File"
                ],
                "summary": "Update file directory",
                "description": "Move file from one directory to another",
                "operationId": "updateFileDirectory",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "description": "File URI",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "directory",
                        "in": "query",
                        "description": "New directory path",
                        "required": false,
                        "schema": {
                            "pattern": "^[^#%&{}\\\\<>*?$!'\":@+`|=]+$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/file/comment": {
            "get": {
                "tags": [
                    "File"
                ],
                "summary": "View comments for a particular file",
                "operationId": "getFileComment",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Comment"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "File"
                ],
                "summary": "Update file comment",
                "description": "Update file comment",
                "operationId": "updateFileComment",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "description": "File URI",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "text/plain": {
                            "schema": {
                                "type": "string"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "File"
                ],
                "summary": "Delete file comment",
                "operationId": "deleteFileComment",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "description": "File URI",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/directory/rule": {
            "put": {
                "tags": [
                    "Directory"
                ],
                "summary": "Creates directory meta-rules",
                "description": "A list of meta-rules are created for the selected directory",
                "operationId": "updateDirectoryMetaRule",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "enforcement",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "pattern": "(STRICT|strict|STANDARD|standard)",
                            "type": "string",
                            "enum": [
                                "STRICT",
                                "STANDARD"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "maxItems": 2147483647,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/MetadataRule"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Directory"
                ],
                "summary": "Deletes directory meta-rules",
                "description": "Deletes meta-rules for the provided directory, Optionally meta-rule can also be provided",
                "operationId": "deleteDirectoryMetaRule",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "metadata-name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/directory/permission": {
            "put": {
                "tags": [
                    "Directory"
                ],
                "summary": "Assign permissions to the directory for users",
                "description": "Assign permissions to users for the directory. Following table describes how permission can be set :<table><thead><tr><th></th><th><code>R</code></th><th><code>W</code></th><th><code>D</code></th></tr></thead><tbody><tr><td><code>action</code></td><td>Download files from this directory.</td><td>Upload file(s) to this directory.</td><td>Delete file(s) of this directory.</td></tr><tr><td><code>directory-action</code></td><td>Read content of sub-directories.</td><td>Create sub-directories, permission, rules.</td><td>Delete sub-directories</td></tr></tbody></table>",
                "operationId": "updatePermission",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "maxItems": 2147483647,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Permission"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Directory"
                ],
                "summary": "Deletes permissions attached with a directory",
                "description": "Deletes permissions attached with a directory",
                "operationId": "deleteDirectoryPermission",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/directory/metadata": {
            "put": {
                "tags": [
                    "Directory"
                ],
                "summary": "Attach custom metadata with directory",
                "description": "Add new metadata or update value of existing metadata value",
                "operationId": "updateDirectoryMetadata",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Directory"
                ],
                "summary": "Delete a directory metadata",
                "operationId": "deleteDirectoryMetadata",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/provenance/repository/{repo-id}": {
            "get": {
                "tags": [
                    "Provenance"
                ],
                "summary": "Fetch provenance records",
                "operationId": "getProvenance",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page-no",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FAIRProvenance"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Provenance"
                ],
                "summary": "Attach provenance records",
                "operationId": "updateProvenance",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/FAIRProvenanceDescriptor"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DlsResponse"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/permission/repository/{repo-id}": {
            "get": {
                "tags": [
                    "Permission"
                ],
                "summary": "Get permission detail of repository or any specific datapoint in it",
                "operationId": "getPermission",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/FAIRPermission"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Permission"
                ],
                "summary": "Update permission of a repository or specific node in it",
                "operationId": "updatePermission_1",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FAIRPermission"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Permission"
                ],
                "summary": "Remove permission from a repository or any specific node in it",
                "operationId": "deletePermission",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user-id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/metadata/repository/{repo-id}": {
            "put": {
                "tags": [
                    "Metadata (Datapoint)"
                ],
                "summary": "Update value of existing metadata of a repository or any specific node in it",
                "operationId": "updateMetadata_1",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Metadata (Datapoint)"
                ],
                "summary": "Delete metadata",
                "operationId": "deleteMetadata",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "key",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/user/organization": {
            "put": {
                "tags": [
                    "Administration"
                ],
                "summary": "Register new tenant",
                "operationId": "updateOrganization",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "organization",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "pattern": "^([\\w-.:][ ]?)*[a-zA-Z]([\\w-.:][ ]?)*$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/storage": {
            "get": {
                "tags": [
                    "Administration"
                ],
                "summary": "Geet maximum storage limit for this tenant",
                "operationId": "getStorage",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "query",
                        "description": "Enter the tcup tenant name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "integer",
                                        "format": "int64"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Administration"
                ],
                "summary": "Set maximum storage limit for this tenant",
                "operationId": "setStorage",
                "parameters": [
                    {
                        "name": "tenant",
                        "in": "query",
                        "description": "Enter the tcup tenant name",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "storage-limit",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get users",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create new DLS user(s)",
                "operationId": "register",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "maxItems": 2147483647,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/key": {
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create new DLS user with key",
                "operationId": "registerWithKey",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "maxItems": 2147483647,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/share/{dls-user}": {
            "post": {
                "tags": [
                    "Share"
                ],
                "summary": "Share files with other DLS users",
                "description": "Files owned by you can be shared to other DLS users who can download the file. If a file has been shared to you, it can not be shared to other DLS users.Files containing linked files are also safe to share as linked files can not be downloaded by the DLS users you have shared the files with.",
                "operationId": "createShare",
                "parameters": [
                    {
                        "name": "dls-user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "File is shared successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid DLS key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Invalid file URI or you are not file owner",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "DLS username is not available",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Share"
                ],
                "summary": "Remove a file share",
                "operationId": "deleteShare",
                "parameters": [
                    {
                        "name": "dls-user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File share is deleted successfully",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Deprecated status code",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid DLS key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "No file share is available to delete",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "409": {
                        "description": "DLS username is not available",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schema": {
            "get": {
                "tags": [
                    "Schema"
                ],
                "summary": "Get meta-data details",
                "description": "Optionally provide the filter fields to fetch all the matching meta-data details",
                "operationId": "getSchema",
                "parameters": [
                    {
                        "name": "names",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "TEXT",
                                "NUMERIC"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/MetaSchema"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Schema"
                ],
                "summary": "Define a schema for all other metadata of files and directories",
                "description": "If metadata schema is created, all other API which deals with metadata must conform to this set of metadata.",
                "operationId": "createSchema",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MetaSchema"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Schema"
                ],
                "summary": "Completely removes metadata schema, hence disable schema enforcement",
                "description": "All metadata in schema are removed irrespective of whether they are in use",
                "operationId": "deleteSchema",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schema/ontology": {
            "get": {
                "tags": [
                    "Schema"
                ],
                "summary": "Fetch ontology prefixes and vocabulary IRI",
                "description": "To use custom vocabulary in FAIR, definition of prefixes need to be pre-registered",
                "operationId": "getDefinition",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Schema"
                ],
                "summary": "Register ontology prefixes and vocabulary IRI",
                "description": "To use custom vocabulary in FAIR, definition of prefixes need to be registered here",
                "operationId": "createDefinition",
                "parameters": [
                    {
                        "name": "prefix",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "\\w*",
                            "type": "string"
                        }
                    },
                    {
                        "name": "vocabularyLink",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "\\w*(://).*",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/links": {
            "post": {
                "tags": [
                    "Link"
                ],
                "summary": "Relate multiple files",
                "description": "Create relations between multiple files in a single API call",
                "operationId": "relateMultiple",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "maxItems": 2147483647,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Link"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/link/{relation}": {
            "post": {
                "tags": [
                    "Link"
                ],
                "summary": "Relate two files",
                "description": "Provide a relation name and file path. File path consists of savepoint/file.ext",
                "operationId": "relate",
                "parameters": [
                    {
                        "name": "lhs-file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relation",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "pattern": "([a-zA-Z_]){2,50}",
                            "type": "string"
                        }
                    },
                    {
                        "name": "rhs-file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/files": {
            "get": {
                "tags": [
                    "File"
                ],
                "summary": "Download multiple files as ZIP",
                "operationId": "downloadAll",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        }
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "pattern": "^((\\(?(([\\w\\*]+[ ]*(=|>|<|>=|<=|!=)[ ]*'[^&!,'\"=]+')(?!([ ]*['\\w\\(][ ]*))|([\\w\\*]+)(?!([ ]*['\\(])[ ]*)|('[^&!,'\"=]+')(?!([ ]*['\\w\\(])[ ]*))\\)?([ ]*[&,]?[ ]*))+)(?<![,& ])$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fileUri",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "fileCount",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "format": "int32"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/StreamingResponseBody"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "Upload multiple files to DLS",
                "description": "Upload multiple files along with the file descriptor\nFollowing is a sample file descriptor JSON : \n[{\n\t\"filename\": \"\",\n\t\"savepoint\": \"\",\n\t\"mode\": \"\",\n\t\"directory\": \"\",\n\t\"comment\": \"\"\n\t\"metadata\": [\"K=V\"]\n}]",
                "operationId": "uploadMultiple",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "descriptor",
                                    "file"
                                ],
                                "type": "object",
                                "properties": {
                                    "descriptor": {
                                        "type": "string"
                                    },
                                    "file": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "External File uploaded / metadata updated",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "File upload request accepted",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid DLS key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/files/bundle": {
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "Upload multiple files and create a bundle in DLS",
                "description": "Upload multiple files along with the file descriptor to create a compressed aggregate file as bundle \nFollowing is a sample JSON for bundle descriptor\n\n[{\n\t\"filename\": \"\",\n\t\"directory\": \"\",\n\t\"comment\": \"\",\n\t\"metadata\": [\"K=V\"]\n}]",
                "operationId": "uploadBundle",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "pattern": "^[^#%&{}\\\\<>*?$!'\":@+`|=]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "compression type",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "ZIP",
                                "TAR",
                                "TAR-GZ"
                            ]
                        }
                    },
                    {
                        "name": "savepoint",
                        "in": "query",
                        "description": "Savepoint name",
                        "required": false,
                        "schema": {
                            "pattern": "^((/)?([\\w-.:]*[a-zA-Z][\\w-.:]*)+){1,10}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "description": "Comma-separated KV pair",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "required": [
                                    "descriptor",
                                    "file"
                                ],
                                "type": "object",
                                "properties": {
                                    "comment": {
                                        "type": "string",
                                        "description": "Comment"
                                    },
                                    "descriptor": {
                                        "type": "string"
                                    },
                                    "file": {
                                        "type": "array",
                                        "items": {
                                            "type": "string",
                                            "format": "binary"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Upload files to create a bundle",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "File upload request accepted",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid DLS key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/file": {
            "get": {
                "tags": [
                    "File"
                ],
                "summary": "Download file from DLS",
                "operationId": "download",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RedirectView"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "File"
                ],
                "summary": "Upload file to DLS",
                "description": "\n\rA file is uniquely identified in DLS by file name (along with extension) and savepoint name. \n\rWhile uploading a new file, provide a unique name for the file. For new files, savepoint is optional. If same file is being uploaded with updated content, provide a different savepoint name.\n\r Provide any arbitrary comma-separated key value pair for describing the metadata about file.\n\rDLS determines following metadata inherently ~ file name, content type, file size, created on and creator dls key\n\rVarious combination of request parameter will allow various strategy in DLS to take, for example\n\r\t 1. Provide filename, savepoint, file and metadata will upload a file to directory /savepoint/file.name and write metadata\n\r\t 2. Provide filename, file and metadata will upload to /file.name and write metadata\n\r\t 3. Provide filename and file will only upload file and associate to any existing metadata\n\r\t 4. Provide filename and metadata will only write metadata in DB",
                "operationId": "upload",
                "parameters": [
                    {
                        "name": "filename",
                        "in": "query",
                        "description": "File name",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%\\/<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "savepoint",
                        "in": "query",
                        "description": "Savepoint name",
                        "required": false,
                        "schema": {
                            "pattern": "^((/)?([\\w-.:]*[a-zA-Z][\\w-.:]*)+){1,10}$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "directory",
                        "in": "query",
                        "description": "Source directory",
                        "required": false,
                        "schema": {
                            "pattern": "^[^#%&{}\\\\<>*?$!'\":@+`|=]+$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "mode",
                        "in": "query",
                        "description": "Overwrite, Append or Archive. Default Restrict",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "APPEND",
                                "ARCHIVE",
                                "OVERWRITE"
                            ]
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file": {
                                        "type": "string",
                                        "description": "Uploaded filename to be unique",
                                        "format": "binary"
                                    },
                                    "metadata": {
                                        "type": "array",
                                        "description": "Comma-separated KV pair",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "comment": {
                                        "type": "string",
                                        "description": "Comment"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "External file uploaded/metadata updated",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "202": {
                        "description": "File uploaded request accepted",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid API key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Invalid DLS key",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "File"
                ],
                "summary": "Delete a file",
                "operationId": "deleteFile",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "forced",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/directory": {
            "get": {
                "tags": [
                    "Directory"
                ],
                "summary": "Get the details of directory along with permission",
                "description": "Use a specific directory name to get the detail. This will return result if the user has read <code>[R]</cod> permission on the directory.Admin can search without providing any specific directory name.",
                "operationId": "getDirectory",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Directory"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Directory"
                ],
                "summary": "Creates directory and assign permissions to the directory for users or group",
                "description": "Creates directory and assign permissions to the directory for users or group",
                "operationId": "createNewDirectory",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "maxItems": 2147483647,
                                "minItems": 1,
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Directory"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Directory"
                ],
                "summary": "Deletes Directory or all leaf directories including the directory provided",
                "description": "Deletes Directory or all leaf directories including the directory provided",
                "operationId": "deleteDirectory",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/repository": {
            "post": {
                "tags": [
                    "Repository"
                ],
                "summary": "Create a new repository node in data point",
                "description": "Assign permissions to users for the directory. Following table describes how permission can be set :<table><thead><tr><th><code>Permission</code></th><th><code>Description</code></th></tr></thead><tbody><tr><td><code>R</code></td><td>User can view the repository metadata and catalog links</td></tr><tr><td><code>W</code></td><td>User can create catalog in this repository and change repository metadata</td></tr><tr><td><code>D</code></td><td>User can delete this repository</td></tr></tbody></table>",
                "operationId": "createRepository",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FAIRRepositoryDescriptor"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/repository/{repo-id}/catalog": {
            "post": {
                "tags": [
                    "Catalog (Datapoint)"
                ],
                "summary": "Create a new catalog inside existing repository in FAIR",
                "description": "Assign permissions to users for the directory. Following table describes how permission can be set :<table><thead><tr><th><code>Permission</code></th><th><code>Description</code></th></tr></thead><tbody><tr><td><code>R</code></td><td>User can view the catalog metadata and dataset links</td></tr><tr><td><code>W</code></td><td>User can create dataset in this catalog and change catalog metadata</td></tr><tr><td><code>D</code></td><td>User can delete this catalog</td></tr></tbody></table>",
                "operationId": "createCatalog",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FAIRCatalogDescriptor"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/repository/{repo-id}/catalog/{catalog-id}/dataset": {
            "post": {
                "tags": [
                    "Dataset"
                ],
                "summary": "Create a new dataset inside an existing catalog in FAIR",
                "description": "Assign permissions to users for the directory. Following table describes how permission can be set :<table><thead><tr><th><code>Permission</code></th><th><code>Description</code></th></tr></thead><tbody><tr><td><code>R</code></td><td>User can view the dataset metadata and distribution links</td></tr><tr><td><code>W</code></td><td>User can create distribution in this dataset and change dataset metadata</td></tr><tr><td><code>D</code></td><td>User can delete this dataset</td></tr></tbody></table>",
                "operationId": "createDataset",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FAIRDatasetDescriptor"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/repository/{repo-id}/catalog/{catalog-id}/dataset/{dataset-id}/distribution": {
            "post": {
                "tags": [
                    "Distribution"
                ],
                "summary": "Create a new distribution inside an existing dataset in FAIR",
                "operationId": "createDistribution",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/FAIRDistributionDescriptor"
                                }
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/DlsResponse"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/user": {
            "get": {
                "tags": [
                    "Administration"
                ],
                "summary": "Get DLS admin key of the tenant",
                "operationId": "getDlsAdminKey",
                "parameters": [
                    {
                        "name": "tenant_api_key",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Administration"
                ],
                "summary": "Register new tenant",
                "operationId": "createNewTenant",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Tenant"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/names": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get user names",
                "operationId": "getAllUserNames",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/statistics": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Get statistics about the DLS user account",
                "description": "Get total file count, total volume of data etc",
                "operationId": "getStats",
                "parameters": [
                    {
                        "name": "cumulative",
                        "in": "query",
                        "description": "For admin to see cumulative statistics for all users",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogStatistics"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/share": {
            "get": {
                "tags": [
                    "Share"
                ],
                "summary": "Get all the shared files",
                "operationId": "getAllShare",
                "parameters": [
                    {
                        "name": "dls-user",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "show-time",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/relation": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Get all relation names",
                "description": "Get all relation names available in DLS, across all tenants",
                "operationId": "getAllRelationNames",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/organization": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Get the details organization hierarchy for the tenant",
                "description": "Returns the list of organization positions and the admin and user list for each of them",
                "operationId": "getOrganizationTree",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/OrgPos"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/link": {
            "get": {
                "tags": [
                    "Link"
                ],
                "operationId": "getLinks",
                "parameters": [
                    {
                        "name": "lhs-file-uri",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "relation",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "rhs-file-uri",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Link"
                ],
                "operationId": "deleteLinks",
                "parameters": [
                    {
                        "name": "lhs-file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    },
                    {
                        "name": "relation",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "([a-zA-Z_]){2,50}",
                            "type": "string"
                        }
                    },
                    {
                        "name": "rhs-file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/lineage": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Get the details various operation performed on a file",
                "description": "Returns the chronological list of operations performed on a file",
                "operationId": "getLineage",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Lineage"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/keylist": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Get all metadata key names",
                "description": "All metadata key names used during file upload till now",
                "operationId": "getMetadataKeys",
                "parameters": [
                    {
                        "name": "withValue",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "includeDirectory",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "value",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/filelist": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Get file URI as a list",
                "description": "This API returns a list of file URI which are not deleted and transferred successfully",
                "operationId": "getFileList",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/file/temp": {
            "get": {
                "tags": [
                    "File"
                ],
                "summary": "Download file from DLS staging location",
                "operationId": "downloadFromStage",
                "parameters": [
                    {
                        "name": "file-uri",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/datapoint": {
            "get": {
                "tags": [
                    "Datapoint"
                ],
                "summary": "Find a node in FAIR using metadata",
                "operationId": "find",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "exclude",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "uniqueItems": true,
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "REPOSITORY",
                                    "CATALOG",
                                    "DATASET",
                                    "DISTRIBUTION",
                                    "NONE"
                                ]
                            }
                        }
                    },
                    {
                        "name": "include-directory",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/repository/{repo-id}": {
            "get": {
                "tags": [
                    "Repository"
                ],
                "summary": "Get a repository by its identifier",
                "operationId": "getRepository",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/FAIRRepository"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Datapoint"
                ],
                "summary": "Delete a repository or any specific node in it",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/repository/{repo-id}/catalog/{catalog-id}": {
            "get": {
                "tags": [
                    "Catalog (Datapoint)"
                ],
                "summary": "Get a catalog by its identifier",
                "operationId": "getCatalog",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/FAIRCatalog"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/repository/{repo-id}/catalog/{catalog-id}/dataset/{dataset-id}": {
            "get": {
                "tags": [
                    "Dataset"
                ],
                "summary": "Get a dataset by its identifier",
                "operationId": "getDataset",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/FAIRDataset"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/datapoint/repository/{repo-id}/catalog/{catalog-id}/dataset/{dataset-id}/distribution/{distribution-id}": {
            "get": {
                "tags": [
                    "Distribution"
                ],
                "summary": "Get a distribution by its identifier",
                "operationId": "getDistribution",
                "parameters": [
                    {
                        "name": "repo-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "catalog-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "dataset-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "distribution-id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/FAIRDistribution"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/catalog": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Search files and meta-data",
                "description": "Enter any text to search files and meta-data",
                "operationId": "discover",
                "parameters": [
                    {
                        "name": "metadata",
                        "in": "query",
                        "description": "Use following patterns to construct metadata query: <ul><li>Search for metadata key as <code>K</code></li><li>Search for metadata value as <code>'V'</code></li><li>Search specific metadata as <code>K='V'</code></li><li>Search multiple metadata keys matching any of them as <code>K1, K2</code></li><li>Search multiple metadata values matching any of them as <code>'V1', 'V2'</code></li><li>Search multiple specific metadata matching any of them as <code>K1='V1', K2='V2'</code></li><li>Search multiple metadata keys matching all of them as <code>K1 & K2</code></li><li>Search multiple metadata values matching all of them as <code>'V1' & 'V2'</code></li><li>Search multiple specific metadata matching all of them as <code>K1='V1' & K2='V2'</code></li><li>Search with complex combination <code>K1='V1' & 'V2', K3 </code></li><li>Note <code>cond1 & cond2 , cond3</code> is evaluated as <code>(cond1 AND cond2) OR cond3</code></li><li>Use wildcard for metadata key or value using <code>K*, '*V'</code></li><li>Use logical operators on numeric and timestamp value as <code>K>'100'</code></li><li>Following logical operators are allowed <code>></code>, <code><</code>, <code>>=</code>, <code><=</code>, <code>=</code>, <code>!=</code></li></ul>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "text",
                        "in": "query",
                        "description": "free text search",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "02-May-2018 00:48:02 +00:00",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": ">1KB",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "external",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "transferred",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "bundled",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ownFile",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "locked",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "uri",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "savepoint",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "directory",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "createdOn",
                                "fileName",
                                "size"
                            ]
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/Catalog"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/catalog/file-count": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "operationId": "getDirectoryTreeCatalog",
                "parameters": [
                    {
                        "name": "directory",
                        "in": "query",
                        "description": "Mention the directory name to fetch it's sub-directories only. The tree starts from this directory.",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "immediateOnly",
                        "in": "query",
                        "description": "Fetch only immediate subdirectory",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DirectoryCatalog"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/catalog/explorer": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Search files, directories, browse through file catalogs",
                "description": "Enter any text to search files and meta-data",
                "operationId": "explore",
                "parameters": [
                    {
                        "name": "name",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "path",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "parent",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "savepoint",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "TCUP username who created the file or directory",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "<code>>1KB</code>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fileCount",
                        "in": "query",
                        "description": "Find directories which have count of immediate files <code>=0</code>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "File or directory creation timestamp",
                        "schema": {
                            "maxItems": 2,
                            "type": "array",
                            "items": {
                                "type": "string",
                                "example": "02-May-2023 00:48:02 +00:00"
                            }
                        }
                    },
                    {
                        "name": "nameRegex",
                        "in": "query",
                        "description": "Regular expression for file or directory name, e.g name without extension - <code>[^.]*</code>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "and",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "name",
                                    "path",
                                    "parent",
                                    "savepoint",
                                    "user",
                                    "size",
                                    "fileCount",
                                    "time",
                                    "nameRegex",
                                    "metadata"
                                ]
                            }
                        }
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "createdOn",
                                "name",
                                "size",
                                "createdBy"
                            ]
                        }
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        }
                    },
                    {
                        "name": "fetch",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "directoryOnly",
                                "fileOnly",
                                "directoryFirst",
                                "fileFirst"
                            ]
                        }
                    },
                    {
                        "name": "pageNo",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pageSize",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExploreCatalog"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/catalog/directory": {
            "get": {
                "tags": [
                    "Catalog"
                ],
                "summary": "Get Directory-wise Catalog",
                "description": "Optionally enter a directory",
                "operationId": "getDirectoryCatalog",
                "parameters": [
                    {
                        "name": "fetchSize",
                        "in": "query",
                        "description": "Fetch size must be more than number of nodes in directory tree. Default is 100. Warning! Increasing fetch size will increase response delay.",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "metadata",
                        "in": "query",
                        "description": "Use following patterns to construct metadata query: <ul><li>Search for metadata key as <code>K</code></li><li>Search for metadata value as <code>'V'</code></li><li>Search specific metadata as <code>K='V'</code></li><li>Search multiple metadata keys matching any of them as <code>K1, K2</code></li><li>Search multiple metadata values matching any of them as <code>'V1', 'V2'</code></li><li>Search multiple specific metadata matching any of them as <code>K1='V1', K2='V2'</code></li><li>Search multiple metadata keys matching all of them as <code>K1 & K2</code></li><li>Search multiple metadata values matching all of them as <code>'V1' & 'V2'</code></li><li>Search multiple specific metadata matching all of them as <code>K1='V1' & K2='V2'</code></li><li>Search with complex combination <code>K1='V1' & 'V2', K3 </code></li><li>Note <code>cond1 & cond2 , cond3</code> is evaluated as <code>(cond1 AND cond2) OR cond3</code></li><li>Use wildcard for metadata key or value using <code>K*, '*V'</code></li><li>Use logical operators on numeric and timestamp value as <code>K>'100'</code></li><li>Following logical operators are allowed <code>></code>, <code><</code>, <code>>=</code>, <code><=</code>, <code>=</code>, <code>!=</code></li></ul>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "text",
                        "in": "query",
                        "description": "free text search",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "time",
                        "in": "query",
                        "description": "02-May-2018 00:48:02 +00:00",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "size",
                        "in": "query",
                        "description": "<code>>1KB</code>",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "external",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "transferred",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "bundled",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ownFile",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "locked",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "uri",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filename",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "savepoint",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "directory",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/DirectoryCatalog"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            }
        },
        "/admin/storage/type": {
            "get": {
                "tags": [
                    "Administration"
                ],
                "summary": "Get DLS storage detail",
                "operationId": "getStorageType",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "object"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/{username}": {
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete user",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schema/ontology/{prefix}": {
            "delete": {
                "tags": [
                    "Schema"
                ],
                "summary": "Delete ontology prefixes and vocabulary IRI",
                "description": "To use custom vocabulary in FAIR, definition of prefixes need to be pre-registered",
                "operationId": "deleteDefinition",
                "parameters": [
                    {
                        "name": "prefix",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/schema/metadata/{name}": {
            "delete": {
                "tags": [
                    "Schema"
                ],
                "summary": "Deletes a meta-data from schema",
                "description": "A specific metadata is removed from enforcement, if it is already not in use",
                "operationId": "deleteSchema_1",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/user/{username}": {
            "delete": {
                "tags": [
                    "Administration"
                ],
                "summary": "Delete tenant",
                "operationId": "deleteTenant",
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "MetadataPayload": {
                "type": "object",
                "properties": {
                    "files": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "directories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "metadata": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "MetadataRule": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 255,
                        "minLength": 0,
                        "pattern": "[\\w]+",
                        "type": "string",
                        "example": "keyname"
                    },
                    "type": {
                        "pattern": "(TEXT|text|NUMERIC|numeric)",
                        "type": "string"
                    },
                    "default-value": {
                        "type": "string"
                    },
                    "value-mandatory": {
                        "type": "boolean"
                    }
                }
            },
            "DlsResponse": {
                "type": "object",
                "properties": {
                    "key": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "messages": {
                        "uniqueItems": true,
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "code": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "Permission": {
                "required": [
                    "action",
                    "users"
                ],
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "action": {
                        "pattern": "[Rr]?[Ww]?[Dd]?",
                        "type": "string",
                        "example": "RWD"
                    },
                    "directory-action": {
                        "pattern": "[Rr]?[Ww]?[Dd]?",
                        "type": "string",
                        "example": "RWD"
                    }
                }
            },
            "FAIRProvenanceDescriptor": {
                "type": "object",
                "properties": {
                    "custom": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "prov:wasGeneratedBy": {
                        "type": "string"
                    },
                    "prov:atTime": {
                        "type": "string",
                        "format": "dd-MMM-yyyy HH:mm:ss Z",
                        "example": "02-FEB-2020 20:02:20 IST"
                    },
                    "prov:event": {
                        "type": "string"
                    }
                }
            },
            "FAIRPermission": {
                "required": [
                    "action",
                    "users"
                ],
                "type": "object",
                "properties": {
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "action": {
                        "pattern": "[Rr]?[Ww]?[Dd]?",
                        "type": "string"
                    }
                }
            },
            "User": {
                "required": [
                    "dls-user"
                ],
                "type": "object",
                "properties": {
                    "dls-key": {
                        "type": "string"
                    },
                    "dls-user": {
                        "pattern": "^([\\w-.]+[@]?[\\w]+([.]?[a-zA-Z]+){3})|([\\w]+)$",
                        "type": "string",
                        "example": "username"
                    }
                },
                "description": "Create user in DLS with TCUP tenant key and DLS key"
            },
            "MetaSchema": {
                "type": "object",
                "properties": {
                    "metadata": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MetadataDef"
                        }
                    },
                    "config": {
                        "$ref": "#/components/schemas/MetadataConfig"
                    }
                }
            },
            "MetadataConfig": {
                "type": "object",
                "properties": {
                    "max-metadata-per-file": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "max-key-len": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "max-value-len": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "allow-adhoc": {
                        "type": "boolean"
                    }
                }
            },
            "MetadataDef": {
                "required": [
                    "name",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "maxLength": 150,
                        "minLength": 3,
                        "pattern": "[\\w]+",
                        "type": "string",
                        "example": "keyname"
                    },
                    "type": {
                        "pattern": "(TEXT|text|NUMERIC|numeric)",
                        "type": "string"
                    },
                    "description": {
                        "maxLength": 250,
                        "minLength": 0,
                        "type": "string"
                    }
                }
            },
            "Link": {
                "type": "object",
                "properties": {
                    "relation": {
                        "pattern": "\\w+",
                        "type": "string",
                        "example": "is_generated_by"
                    },
                    "lhs-file-uri": {
                        "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                        "type": "string"
                    },
                    "rhs-file-uri": {
                        "pattern": "^(([^%<>:\"\\\\|?*]+)|(\\w+:\\/\\/.+))$",
                        "type": "string"
                    }
                }
            },
            "Directory": {
                "required": [
                    "directory"
                ],
                "type": "object",
                "properties": {
                    "enforcement": {
                        "pattern": "(STRICT|strict|STANDARD|standard)",
                        "type": "string",
                        "example": "STANDARD"
                    },
                    "directory": {
                        "pattern": "^[^#%&{}\\\\<>*?$!'\":@+`|=]+$",
                        "type": "string",
                        "example": "/directory"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Permission"
                        }
                    },
                    "metadata-rule": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/MetadataRule"
                        }
                    },
                    "meta-data": {
                        "type": "string",
                        "example": "key1=value1,keyN=valueN"
                    },
                    "created-on": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "FAIRRepositoryDescriptor": {
                "required": [
                    "dct:identifier"
                ],
                "type": "object",
                "properties": {
                    "dct:identifier": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FAIRPermission"
                        }
                    },
                    "custom": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dct:title": {
                        "type": "string"
                    },
                    "dct:hasVersion": {
                        "type": "string"
                    },
                    "dct:description": {
                        "type": "string"
                    },
                    "dct:publisher": {
                        "type": "string"
                    },
                    "dct:language": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dct:license": {
                        "type": "string"
                    },
                    "dct:subject": {
                        "type": "string"
                    },
                    "dct:alternative": {
                        "type": "string"
                    },
                    "dct:rights": {
                        "type": "string"
                    },
                    "r3d:institution": {
                        "type": "string"
                    }
                }
            },
            "FAIRCatalogDescriptor": {
                "required": [
                    "dct:identifier"
                ],
                "type": "object",
                "properties": {
                    "dct:identifier": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FAIRPermission"
                        }
                    },
                    "custom": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dct:title": {
                        "type": "string"
                    },
                    "dct:hasVersion": {
                        "type": "string"
                    },
                    "dct:publisher": {
                        "type": "string"
                    },
                    "dct:description": {
                        "type": "string"
                    },
                    "dct:languages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dct:license": {
                        "type": "string"
                    },
                    "dct:rights": {
                        "type": "string"
                    },
                    "foaf:homepage": {
                        "type": "string"
                    },
                    "dct:themeTaxonomy": {
                        "type": "string"
                    }
                }
            },
            "FAIRDatasetDescriptor": {
                "required": [
                    "dct:identifier"
                ],
                "type": "object",
                "properties": {
                    "dct:identifier": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FAIRPermission"
                        }
                    },
                    "custom": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dct:title": {
                        "type": "string"
                    },
                    "dct:hasVersion": {
                        "type": "string"
                    },
                    "dct:publisher": {
                        "type": "string"
                    },
                    "dct:description": {
                        "type": "string"
                    },
                    "dct:languages": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dct:license": {
                        "type": "string"
                    },
                    "dct:rights": {
                        "type": "string"
                    },
                    "dcat:theme": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dcat:contactPoint": {
                        "type": "string"
                    },
                    "dcat:keyword": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "dcat:landingPage": {
                        "type": "string"
                    }
                }
            },
            "FAIRDistributionDescriptor": {
                "required": [
                    "dcat:accessURL",
                    "dct:identifier"
                ],
                "type": "object",
                "properties": {
                    "dct:identifier": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FAIRPermission"
                        }
                    },
                    "custom": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dct:title": {
                        "type": "string"
                    },
                    "dct:license": {
                        "type": "string"
                    },
                    "dct:hasVersion": {
                        "type": "string"
                    },
                    "dct:rights": {
                        "type": "string"
                    },
                    "dct:description": {
                        "type": "string"
                    },
                    "dcat:accessURL": {
                        "type": "string"
                    },
                    "dcat:mediaType": {
                        "type": "string"
                    },
                    "dcat:format": {
                        "type": "string"
                    },
                    "dcat:byteSize": {
                        "type": "integer",
                        "format": "int64"
                    }
                }
            },
            "Tenant": {
                "required": [
                    "api-key"
                ],
                "type": "object",
                "properties": {
                    "organization": {
                        "pattern": "^([\\w-.:][ ]?)*[a-zA-Z]([\\w-.:][ ]?)*$",
                        "type": "string",
                        "example": "tcs"
                    },
                    "api-key": {
                        "type": "string"
                    },
                    "tcup-user": {
                        "pattern": "^([\\w-.]+[@]?[\\w]+([.]?[a-zA-Z]+){3})|([\\w]+)$",
                        "type": "string",
                        "example": "username"
                    },
                    "admin-dls-key": {
                        "type": "string"
                    },
                    "admin-user-name": {
                        "pattern": "^([\\w-.]+[@]?[\\w]+([.]?[a-zA-Z]+){3})|([\\w]+)$",
                        "type": "string",
                        "example": "dlsadmin"
                    }
                },
                "description": "Provision TCUP user in DLS with TCUP tenant key and TCUP user name"
            },
            "CatalogStatistics": {
                "type": "object",
                "properties": {
                    "total-volume": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "total-count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total-shared": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total-failed": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total-external": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total-deleted": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total-bundled": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "last-uploaded": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "first-uploaded": {
                        "type": "string",
                        "format": "date-time"
                    }
                }
            },
            "OrgPos": {
                "type": "object",
                "properties": {
                    "position": {
                        "type": "string"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "admins": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "organization": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OrgPos"
                        }
                    }
                },
                "description": "Create Comment while uploading file or later"
            },
            "Lineage": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string"
                    },
                    "archive-uri": {
                        "type": "string"
                    },
                    "renamed-uri": {
                        "type": "string"
                    },
                    "time": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "size": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "meta-data": {
                        "type": "string"
                    }
                }
            },
            "StreamingResponseBody": {
                "type": "object"
            },
            "ApplicationContext": {
                "type": "object",
                "properties": {
                    "parent": {
                        "$ref": "#/components/schemas/ApplicationContext"
                    },
                    "id": {
                        "type": "string"
                    },
                    "displayName": {
                        "type": "string"
                    },
                    "applicationName": {
                        "type": "string"
                    },
                    "startupDate": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "autowireCapableBeanFactory": {
                        "$ref": "#/components/schemas/AutowireCapableBeanFactory"
                    },
                    "environment": {
                        "$ref": "#/components/schemas/Environment"
                    },
                    "beanDefinitionCount": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "beanDefinitionNames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "parentBeanFactory": {
                        "$ref": "#/components/schemas/BeanFactory"
                    },
                    "classLoader": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string"
                            },
                            "registeredAsParallelCapable": {
                                "type": "boolean"
                            },
                            "parent": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "registeredAsParallelCapable": {
                                        "type": "boolean"
                                    },
                                    "unnamedModule": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "classLoader": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "type": "string"
                                                    },
                                                    "registeredAsParallelCapable": {
                                                        "type": "boolean"
                                                    },
                                                    "definedPackages": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "object",
                                                            "properties": {
                                                                "name": {
                                                                    "type": "string"
                                                                },
                                                                "annotations": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "declaredAnnotations": {
                                                                    "type": "array",
                                                                    "items": {
                                                                        "type": "object"
                                                                    }
                                                                },
                                                                "sealed": {
                                                                    "type": "boolean"
                                                                },
                                                                "specificationTitle": {
                                                                    "type": "string"
                                                                },
                                                                "specificationVersion": {
                                                                    "type": "string"
                                                                },
                                                                "specificationVendor": {
                                                                    "type": "string"
                                                                },
                                                                "implementationTitle": {
                                                                    "type": "string"
                                                                },
                                                                "implementationVersion": {
                                                                    "type": "string"
                                                                },
                                                                "implementationVendor": {
                                                                    "type": "string"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    "defaultAssertionStatus": {
                                                        "type": "boolean",
                                                        "writeOnly": true
                                                    }
                                                }
                                            },
                                            "descriptor": {
                                                "type": "object",
                                                "properties": {
                                                    "open": {
                                                        "type": "boolean"
                                                    },
                                                    "automatic": {
                                                        "type": "boolean"
                                                    }
                                                }
                                            },
                                            "named": {
                                                "type": "boolean"
                                            },
                                            "annotations": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object"
                                                }
                                            },
                                            "declaredAnnotations": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object"
                                                }
                                            },
                                            "packages": {
                                                "uniqueItems": true,
                                                "type": "array",
                                                "items": {
                                                    "type": "string"
                                                }
                                            },
                                            "layer": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "definedPackages": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string"
                                                },
                                                "annotations": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "declaredAnnotations": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "sealed": {
                                                    "type": "boolean"
                                                },
                                                "specificationTitle": {
                                                    "type": "string"
                                                },
                                                "specificationVersion": {
                                                    "type": "string"
                                                },
                                                "specificationVendor": {
                                                    "type": "string"
                                                },
                                                "implementationTitle": {
                                                    "type": "string"
                                                },
                                                "implementationVersion": {
                                                    "type": "string"
                                                },
                                                "implementationVendor": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "defaultAssertionStatus": {
                                        "type": "boolean",
                                        "writeOnly": true
                                    }
                                }
                            },
                            "unnamedModule": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "classLoader": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            },
                                            "registeredAsParallelCapable": {
                                                "type": "boolean"
                                            },
                                            "definedPackages": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "name": {
                                                            "type": "string"
                                                        },
                                                        "annotations": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object"
                                                            }
                                                        },
                                                        "declaredAnnotations": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object"
                                                            }
                                                        },
                                                        "sealed": {
                                                            "type": "boolean"
                                                        },
                                                        "specificationTitle": {
                                                            "type": "string"
                                                        },
                                                        "specificationVersion": {
                                                            "type": "string"
                                                        },
                                                        "specificationVendor": {
                                                            "type": "string"
                                                        },
                                                        "implementationTitle": {
                                                            "type": "string"
                                                        },
                                                        "implementationVersion": {
                                                            "type": "string"
                                                        },
                                                        "implementationVendor": {
                                                            "type": "string"
                                                        }
                                                    }
                                                }
                                            },
                                            "defaultAssertionStatus": {
                                                "type": "boolean",
                                                "writeOnly": true
                                            }
                                        }
                                    },
                                    "descriptor": {
                                        "type": "object",
                                        "properties": {
                                            "open": {
                                                "type": "boolean"
                                            },
                                            "automatic": {
                                                "type": "boolean"
                                            }
                                        }
                                    },
                                    "named": {
                                        "type": "boolean"
                                    },
                                    "annotations": {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    },
                                    "declaredAnnotations": {
                                        "type": "array",
                                        "items": {
                                            "type": "object"
                                        }
                                    },
                                    "packages": {
                                        "uniqueItems": true,
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "layer": {
                                        "type": "object"
                                    }
                                }
                            },
                            "definedPackages": {
                                "type": "array",
                                "items": {
                                    "type": "object",
                                    "properties": {
                                        "name": {
                                            "type": "string"
                                        },
                                        "annotations": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "declaredAnnotations": {
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "sealed": {
                                            "type": "boolean"
                                        },
                                        "specificationTitle": {
                                            "type": "string"
                                        },
                                        "specificationVersion": {
                                            "type": "string"
                                        },
                                        "specificationVendor": {
                                            "type": "string"
                                        },
                                        "implementationTitle": {
                                            "type": "string"
                                        },
                                        "implementationVersion": {
                                            "type": "string"
                                        },
                                        "implementationVendor": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "defaultAssertionStatus": {
                                "type": "boolean",
                                "writeOnly": true
                            }
                        }
                    }
                }
            },
            "AutowireCapableBeanFactory": {
                "type": "object"
            },
            "BeanFactory": {
                "type": "object"
            },
            "Environment": {
                "type": "object",
                "properties": {
                    "activeProfiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "defaultProfiles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            },
            "RedirectView": {
                "type": "object",
                "properties": {
                    "applicationContext": {
                        "$ref": "#/components/schemas/ApplicationContext"
                    },
                    "servletContext": {
                        "type": "object",
                        "properties": {
                            "classLoader": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "registeredAsParallelCapable": {
                                        "type": "boolean"
                                    },
                                    "definedPackages": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string"
                                                },
                                                "annotations": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "declaredAnnotations": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object"
                                                    }
                                                },
                                                "sealed": {
                                                    "type": "boolean"
                                                },
                                                "specificationTitle": {
                                                    "type": "string"
                                                },
                                                "specificationVersion": {
                                                    "type": "string"
                                                },
                                                "specificationVendor": {
                                                    "type": "string"
                                                },
                                                "implementationTitle": {
                                                    "type": "string"
                                                },
                                                "implementationVersion": {
                                                    "type": "string"
                                                },
                                                "implementationVendor": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "defaultAssertionStatus": {
                                        "type": "boolean",
                                        "writeOnly": true
                                    }
                                }
                            },
                            "majorVersion": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "minorVersion": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "attributeNames": {
                                "type": "object"
                            },
                            "contextPath": {
                                "type": "string"
                            },
                            "initParameterNames": {
                                "type": "object"
                            },
                            "servletNames": {
                                "type": "object",
                                "deprecated": true
                            },
                            "sessionTimeout": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "jspConfigDescriptor": {
                                "type": "object",
                                "properties": {
                                    "taglibs": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "taglibURI": {
                                                    "type": "string"
                                                },
                                                "taglibLocation": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    },
                                    "jspPropertyGroups": {
                                        "type": "array",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "buffer": {
                                                    "type": "string"
                                                },
                                                "elIgnored": {
                                                    "type": "string"
                                                },
                                                "pageEncoding": {
                                                    "type": "string"
                                                },
                                                "scriptingInvalid": {
                                                    "type": "string"
                                                },
                                                "isXml": {
                                                    "type": "string"
                                                },
                                                "includePreludes": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "includeCodas": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                },
                                                "deferredSyntaxAllowedAsLiteral": {
                                                    "type": "string"
                                                },
                                                "trimDirectiveWhitespaces": {
                                                    "type": "string"
                                                },
                                                "errorOnUndeclaredNamespace": {
                                                    "type": "string"
                                                },
                                                "defaultContentType": {
                                                    "type": "string"
                                                },
                                                "urlPatterns": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            "virtualServerName": {
                                "type": "string"
                            },
                            "requestCharacterEncoding": {
                                "type": "string"
                            },
                            "responseCharacterEncoding": {
                                "type": "string"
                            },
                            "effectiveMajorVersion": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "effectiveMinorVersion": {
                                "type": "integer",
                                "format": "int32"
                            },
                            "servlets": {
                                "type": "object",
                                "deprecated": true
                            },
                            "serverInfo": {
                                "type": "string"
                            },
                            "servletContextName": {
                                "type": "string"
                            },
                            "servletRegistrations": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                        "mappings": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "runAsRole": {
                                            "type": "string"
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "className": {
                                            "type": "string"
                                        },
                                        "initParameters": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "filterRegistrations": {
                                "type": "object",
                                "additionalProperties": {
                                    "type": "object",
                                    "properties": {
                                        "servletNameMappings": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "urlPatternMappings": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "name": {
                                            "type": "string"
                                        },
                                        "className": {
                                            "type": "string"
                                        },
                                        "initParameters": {
                                            "type": "object",
                                            "additionalProperties": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            },
                            "sessionCookieConfig": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string"
                                    },
                                    "path": {
                                        "type": "string"
                                    },
                                    "comment": {
                                        "type": "string"
                                    },
                                    "domain": {
                                        "type": "string"
                                    },
                                    "secure": {
                                        "type": "boolean"
                                    },
                                    "maxAge": {
                                        "type": "integer",
                                        "format": "int32"
                                    },
                                    "httpOnly": {
                                        "type": "boolean"
                                    }
                                }
                            },
                            "sessionTrackingModes": {
                                "uniqueItems": true,
                                "type": "array",
                                "writeOnly": true,
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "COOKIE",
                                        "URL",
                                        "SSL"
                                    ]
                                }
                            },
                            "defaultSessionTrackingModes": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "COOKIE",
                                        "URL",
                                        "SSL"
                                    ]
                                }
                            },
                            "effectiveSessionTrackingModes": {
                                "uniqueItems": true,
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "COOKIE",
                                        "URL",
                                        "SSL"
                                    ]
                                }
                            }
                        },
                        "writeOnly": true
                    },
                    "contentType": {
                        "type": "string"
                    },
                    "requestContextAttribute": {
                        "type": "string"
                    },
                    "staticAttributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "exposePathVariables": {
                        "type": "boolean"
                    },
                    "exposeContextBeansAsAttributes": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "exposedContextBeanNames": {
                        "type": "array",
                        "writeOnly": true,
                        "items": {
                            "type": "string"
                        }
                    },
                    "beanName": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    },
                    "contextRelative": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "http10Compatible": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "exposeModelAttributes": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "encodingScheme": {
                        "type": "string",
                        "writeOnly": true
                    },
                    "statusCode": {
                        "type": "string",
                        "writeOnly": true,
                        "enum": [
                            "100 CONTINUE",
                            "101 SWITCHING_PROTOCOLS",
                            "102 PROCESSING",
                            "103 CHECKPOINT",
                            "200 OK",
                            "201 CREATED",
                            "202 ACCEPTED",
                            "203 NON_AUTHORITATIVE_INFORMATION",
                            "204 NO_CONTENT",
                            "205 RESET_CONTENT",
                            "206 PARTIAL_CONTENT",
                            "207 MULTI_STATUS",
                            "208 ALREADY_REPORTED",
                            "226 IM_USED",
                            "300 MULTIPLE_CHOICES",
                            "301 MOVED_PERMANENTLY",
                            "302 FOUND",
                            "302 MOVED_TEMPORARILY",
                            "303 SEE_OTHER",
                            "304 NOT_MODIFIED",
                            "305 USE_PROXY",
                            "307 TEMPORARY_REDIRECT",
                            "308 PERMANENT_REDIRECT",
                            "400 BAD_REQUEST",
                            "401 UNAUTHORIZED",
                            "402 PAYMENT_REQUIRED",
                            "403 FORBIDDEN",
                            "404 NOT_FOUND",
                            "405 METHOD_NOT_ALLOWED",
                            "406 NOT_ACCEPTABLE",
                            "407 PROXY_AUTHENTICATION_REQUIRED",
                            "408 REQUEST_TIMEOUT",
                            "409 CONFLICT",
                            "410 GONE",
                            "411 LENGTH_REQUIRED",
                            "412 PRECONDITION_FAILED",
                            "413 PAYLOAD_TOO_LARGE",
                            "413 REQUEST_ENTITY_TOO_LARGE",
                            "414 URI_TOO_LONG",
                            "414 REQUEST_URI_TOO_LONG",
                            "415 UNSUPPORTED_MEDIA_TYPE",
                            "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                            "417 EXPECTATION_FAILED",
                            "418 I_AM_A_TEAPOT",
                            "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                            "420 METHOD_FAILURE",
                            "421 DESTINATION_LOCKED",
                            "422 UNPROCESSABLE_ENTITY",
                            "423 LOCKED",
                            "424 FAILED_DEPENDENCY",
                            "425 TOO_EARLY",
                            "426 UPGRADE_REQUIRED",
                            "428 PRECONDITION_REQUIRED",
                            "429 TOO_MANY_REQUESTS",
                            "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                            "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                            "500 INTERNAL_SERVER_ERROR",
                            "501 NOT_IMPLEMENTED",
                            "502 BAD_GATEWAY",
                            "503 SERVICE_UNAVAILABLE",
                            "504 GATEWAY_TIMEOUT",
                            "505 HTTP_VERSION_NOT_SUPPORTED",
                            "506 VARIANT_ALSO_NEGOTIATES",
                            "507 INSUFFICIENT_STORAGE",
                            "508 LOOP_DETECTED",
                            "509 BANDWIDTH_LIMIT_EXCEEDED",
                            "510 NOT_EXTENDED",
                            "511 NETWORK_AUTHENTICATION_REQUIRED"
                        ]
                    },
                    "expandUriTemplateVariables": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "propagateQueryParams": {
                        "type": "boolean",
                        "writeOnly": true
                    },
                    "hosts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "redirectView": {
                        "type": "boolean"
                    },
                    "propagateQueryProperties": {
                        "type": "boolean"
                    },
                    "attributes": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "writeOnly": true
                    },
                    "attributesMap": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "object"
                        }
                    },
                    "attributesCSV": {
                        "type": "string",
                        "writeOnly": true
                    }
                }
            },
            "Comment": {
                "type": "object",
                "properties": {
                    "user": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "commented-on": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "file-uri": {
                        "type": "string"
                    }
                },
                "description": "Create Comment while uploading file or later"
            },
            "FAIRRepository": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "r3d:Repository": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FAIRCatalog": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "dcat:Catalog": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FAIRDataset": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "dcat:Dataset": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FAIRDistribution": {
                "type": "object",
                "properties": {
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    },
                    "dcat:Distribution": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                }
            },
            "FAIRProvenance": {
                "type": "object",
                "properties": {
                    "provenance": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "links": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Link"
                        }
                    }
                }
            },
            "BundleDescriptor": {
                "type": "object",
                "properties": {
                    "filename": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "directory": {
                        "type": "string"
                    },
                    "comment": {
                        "type": "string"
                    },
                    "size-bytes": {
                        "type": "integer",
                        "format": "int64"
                    }
                },
                "description": "Bundle descriptor JSON to upload multiple files"
            },
            "Catalog": {
                "type": "object",
                "properties": {
                    "page": {
                        "type": "string"
                    },
                    "count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "result": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileDetail"
                        }
                    }
                }
            },
            "FileDetail": {
                "type": "object",
                "properties": {
                    "savepoint": {
                        "type": "string"
                    },
                    "directory": {
                        "type": "string"
                    },
                    "qualifier": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "locked": {
                        "type": "boolean"
                    },
                    "hidden": {
                        "type": "boolean"
                    },
                    "type": {
                        "type": "string"
                    },
                    "bundled": {
                        "type": "boolean"
                    },
                    "bundle": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/BundleDescriptor"
                        }
                    },
                    "file-uri": {
                        "type": "string"
                    },
                    "created-on": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "external-to-dls": {
                        "type": "boolean"
                    },
                    "size-bytes": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "transfer-success": {
                        "type": "boolean"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "deleted-on": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "meta-data": {
                        "type": "string"
                    },
                    "links-to": {
                        "type": "string"
                    },
                    "links-from": {
                        "type": "string"
                    },
                    "shared-to": {
                        "type": "string"
                    },
                    "shared-by": {
                        "type": "string"
                    },
                    "shared-on": {
                        "type": "string"
                    },
                    "own-file": {
                        "type": "boolean"
                    }
                }
            },
            "DirectoryCatalog": {
                "type": "object",
                "properties": {
                    "path": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "created-on": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created-by": {
                        "type": "string"
                    },
                    "permitted-action": {
                        "type": "string"
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/FileDetail"
                        }
                    },
                    "directories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/DirectoryCatalog"
                        }
                    },
                    "file-count": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            },
            "ExploreCatalog": {
                "type": "object",
                "properties": {
                    "current-page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "total-page": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "record-count": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "directories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Record"
                        }
                    },
                    "files": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Record"
                        }
                    }
                }
            },
            "Metadata": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    },
                    "updated-by": {
                        "type": "string"
                    },
                    "privacy": {
                        "type": "string"
                    }
                }
            },
            "Record": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "created-on": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "created-by": {
                        "type": "string"
                    },
                    "parent": {
                        "type": "string"
                    },
                    "metadata": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Metadata"
                        }
                    },
                    "size-bytes": {
                        "type": "integer",
                        "format": "int64"
                    },
                    "file-count": {
                        "type": "integer",
                        "format": "int32"
                    },
                    "subdir-count": {
                        "type": "integer",
                        "format": "int32"
                    }
                }
            }
        },
        "securitySchemes": {
            "x-api-key": {
                "type": "apiKey",
                "name": "x-api-key",
                "in": "header"
            },
            "x-dls-key": {
                "type": "apiKey",
                "name": "x-dls-key",
                "in": "header"
            }
        }
    }
}
